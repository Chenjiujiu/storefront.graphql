# Queries
type Query {
	cart(id: ID!): Cart
}

# Mutations
type Mutation {
	cartAttributesUpdate(
		attributes: [AttributeInput!]!
		cartId: ID!
	): CartAttributesUpdatePayload
	cartBuyerIdentityUpdate(
		buyerIdentity: CartBuyerIdentityInput!
		cartId: ID!
	): CartBuyerIdentityUpdatePayload
	cartCreate(
		input: CartInput
	): CartBuyerIdentityUpdatePayload
	cartDiscountCodesUpdate(
		cartId: ID!
		discountCodes: [String!]
	): CartDiscountCodesUpdatePayload
	cartLinesAdd(
		cartId: ID!
		lines: [CartLineInput!]!
	): CartLinesAddPayload
	cartLinesRemove(
		cartId: ID!
		lineIds: [ID!]!
	): CartLinesRemovePayload
	cartLinesUpdate(
		cartId: ID!
		lines: [CartLineUpdateInput!]!
	): CartLinesUpdatePayload
	cartMetafieldDelete(
		input: CartMetafieldDeleteInput!
	): CartMetafieldDeletePayload
	cartNoteUpdate(
		cartId: ID!
		note: String
	): CartNoteUpdatePayload
	cartSelectedDeliveryOptionsUpdate(
		cartId: ID!
		selectedDeliveryOptions: [CartSelectedDeliveryOptionInput!]!
	): CartSelectedDeliveryOptionsUpdatePayload

}

# Objects
type Cart {
	attribute: Attribute
	attributes: [Attribute!]!
	buyerIdentity: CarBuyerIdentity!
	checkoutUrl: URL!
	cost: CartCost!
	createdAt: DateTime!
	discountAllocations: [CartDiscountAllocation!]!
	discountCodes: [CartDiscountCode!]!
	id: ID!
	metafield: Metafield
	metafields: [Metafield!]!
	note: String
	totalQuantity: Int
	updatedAt: DateTime
	deliveryGroups: DeliveryGroupsConnection
	lines: LinesConnection
}
type CartAutomaticDiscountAllocation {
	discountedAmount: MoneyV2!
	title: String!
}
type CartBuyerIdentity {
	countryCode: CountryCode
	customer: Customer
	deliveryAddressPreferences: [DeliveryAddress!]!
	email: String
	phone: String
	walletPreferences: [String!]!
}
type CartCodeDiscountAllocation {
	code: String!
	discountedAmount: MoneyV2!
}
type CartDeliveryGroup {
	deliveryAddress: MailingAddress!
	deliveryOptions: [CartDeliveryOption!]!
	id: ID!
	selectedDeliveryOption: CartDeliveryOption
	CartLines(
		first: Int
		after: String
		last: Int
		before: String
		reverse: Boolean
	):CartLinesConnection
}
type CartLineEdge {
	node: BaseCartLine!
	cursor: String!
}
type CartLinesConnection {
	edges: [CartLineEdge]
	pageInfo: PageInfo!
}

type CartDeliveryOption {
	code: String
	deliveryMethodType: DeliveryMethodType!
	description: String
	estimatedCost: MoneyV2!
	handle: String!
	title: String
}
type CartDiscountCode {
	applicable: Boolean!
	code: String!
}
type CartEstimatedCost {
	checkoutChargeAmount: MoneyV2!
	subtotalAmount: MoneyV2!
	totalAmount: MoneyV2!
	totalDutyAmount: MoneyV2
	totalTaxAmount: MoneyV2
}
type CartLine {
	attribute: Attribute
	attributes: [Attribute!]!
	cost: CartLineCost!
	discountAllocations: [CartDiscountAllocation!]!
	id: ID!
	merchandise: Merchandise!
	quantity: Int!
	sellingPlanAllocation: SellingPlanAllocation
}
type CartLineEstimatedCost {
	amount: MoneyV2!
	compareAtAmount: MoneyV2
	subtotalAmount: MoneyV2!
	totalAmount: MoneyV2!
}
