













type Attribute {
	key: String!
	value: String
}
type Customer {
	acceptsMarketing: Boolean!
	createdAt: DateTime!
	defaultAddress: MailingAddress
	displayName: String!
	email: String
	firstName: String
	id: ID!
	lastIncompleteCheckout: Checkout
	lastName: String
	metafield: Metafield
	metafields: [Metafield!]!
	numberOfOrders: UnsignedInt64!
	phone: String
	tags: [String!]!
	updatedAt: DateTime!
}
union DeliveryAddress = MailingAddress
type CarBuyerIdentity{
	countryCode: CountryCode
	customer: Customer
	deliveryAddressPreferences: [DeliveryAddress!]!
	email: String
	phone: String
	walletPreferences: [String!]!
}

type CartCost {
	checkoutChargeAmount: MoneyV2
	subtotalAmount: MoneyV2
	subtotalAmountEstimated: Boolean
	totalAmount: MoneyV2
	totalAmountEstimated: Boolean
	totalDutyAmount: MoneyV2
	totalDutyAmountEstimated: Boolean
	totalTaxAmount: MoneyV2
	totalTaxAmountEstimated: Boolean
}
type CartDiscountAllocation {
	discountedAmount: MoneyV2!
}
type CartDiscountCode {
	applicable: Boolean!
	code: String!
}
union Merchandise = ProductVariant
type BaseCartLine {
	attribute: Attribute
	attributes: [Attribute!]!
	cost: CartLineCost!
	discountAllocations: [CartDiscountAllocation!]!
	id: ID!
	merchandise: Merchandise!
	quantity: Int!
	sellingPlanAllocation: SellingPlanAllocation
}
type SellingPlanAllocation {
	checkoutChargeAmount: MoneyV2!
	priceAdjustments: [SellingPlanAllocationPriceAdjustment!]!
	remainingBalanceChargeAmount: MoneyV2!
	sellingPlan: SellingPlan!
}
type SellingPlan {
	checkoutCharge: SellingPlanCheckoutCharge!
	description: String
	id: ID!
	name: String!
	options: [SellingPlanOption!]!
	priceAdjustments: [SellingPlanPriceAdjustment!]!
	recurringDeliveries: Boolean!
}
type SellingPlanCheckoutCharge {
	type: SellingPlanCheckoutChargeType!
	value: SellingPlanCheckoutChargeValue!
}
enum SellingPlanCheckoutChargeType {
	PERCENTAGE
	PRICE
}
union SellingPlanCheckoutChargeValue = MoneyV2 | SellingPlanCheckoutChargePercentageValue
type SellingPlanCheckoutChargePercentageValue {
	percentage: Float!
}
type SellingPlanOption {
	name: String
	value: String
}
union SellingPlanPriceAdjustmentValue = SellingPlanFixedAmountPriceAdjustment | SellingPlanFixedPriceAdjustment | SellingPlanPercentagePriceAdjustment
type SellingPlanPriceAdjustment {
	adjustmentValue: SellingPlanPriceAdjustmentValue!
	orderCount: Int
}
type SellingPlanAllocationPriceAdjustment {
	compareAtPrice: MoneyV2!
	perDeliveryPrice: MoneyV2!
	price: MoneyV2!
	unitPrice: MoneyV2
}
type CartLineCost {
	amountPerQuantity: MoneyV2!
	compareAtAmountPerQuantity: MoneyV2
	subtotalAmount: MoneyV2!
	totalAmount: MoneyV2!
}
