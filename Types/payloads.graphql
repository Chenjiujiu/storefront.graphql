type CartAttributesUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartBuyerIdentityUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartCreatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartDiscountCodesUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartLinesAddPayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartLinesRemovePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartLinesUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartMetafieldDeletePayload {
	deletedId: ID
	userErrors: [MetafieldDeleteUserError!]!
}
type CartMetafieldsSetPayload{
	metafields: [Metafield!]
	userErrors: [MetafieldsSetUserError!]!
}
type CartNoteUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CartSelectedDeliveryOptionsUpdatePayload {
	cart: Cart
	userErrors: [CartUserError!]!
}
type CheckoutAttributesUpdateV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutCompleteFreePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutCompleteWithCreditCardV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
	payment: Payment
}
type CheckoutCompleteWithTokenizedPaymentV3Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
	payment: Payment
}
type CheckoutCreatePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
	queueToken: String
}
type CheckoutCustomerAssociateV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
	customer: Customer
}
type CheckoutCustomerDisassociateV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutDiscountCodeApplyV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutDiscountCodeRemovePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutEmailUpdateV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutGiftCardRemoveV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutGiftCardsAppendPayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutLineItemsAddPayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutLineItemsRemovePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutLineItemsReplacePayload {
	checkout: Checkout
	userErrors: [CheckoutUserError!]!
}
type CheckoutLineItemsUpdatePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutShippingAddressUpdateV2Payload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CheckoutShippingLineUpdatePayload {
	checkout: Checkout
	checkoutUserErrors: [CheckoutUserError!]!
}
type CustomerAccessTokenCreatePayload {
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
type CustomerAccessTokenCreateWithMultipassPayload {
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
type CustomerAccessTokenDeletePayload {
	deletedAccessToken: String
	userErrors: [UserError!]!
}
type CustomerAccessTokenRenewPayload {
	customerAccessToken: CustomerAccessToken
	userErrors: [UserError!]!

}
type CustomerActivateByUrlPayload {
	customer: Customer
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
type CustomerActivatePayload {
	customer: Customer
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!

}
type CustomerAddressCreatePayload {
	customerAddress: MailingAddress
	customerUserErrors: [CustomerUserError!]!

}
type CustomerAddressDeletePayload {
	customerUserErrors: [CustomerUserError!]!
	deletedCustomerAddressId: String
}
type CustomerAddressUpdatePayload {
	customerAddress: MailingAddress
	customerUserErrors: [CustomerUserError!]!
}
type CustomerCreatePayload {
	customer: Customer
	customerUserErrors: [CustomerUserError!]!
}
type CustomerDefaultAddressUpdatePayload {
	customer: Customer
	customerUserErrors: [CustomerUserError!]!
}
type CustomerRecoverPayload {
	customerUserErrors: [CustomerUserError!]!
}
type CustomerResetByUrlPayload {
	customer: Customer
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
type CustomerResetPayload {
	customer: Customer
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
type CustomerUpdatePayload {
	customer: Customer
	customerAccessToken: CustomerAccessToken
	customerUserErrors: [CustomerUserError!]!
}
